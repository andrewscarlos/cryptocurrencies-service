// Code generated by MockGen. DO NOT EDIT.
// Source: repository/asset.adapter.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "cryptocurrencies-service/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAssetRepositoryInterface is a mock of AssetRepositoryInterface interface.
type MockAssetRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAssetRepositoryInterfaceMockRecorder
}

// MockAssetRepositoryInterfaceMockRecorder is the mock recorder for MockAssetRepositoryInterface.
type MockAssetRepositoryInterfaceMockRecorder struct {
	mock *MockAssetRepositoryInterface
}

// NewMockAssetRepositoryInterface creates a new mock instance.
func NewMockAssetRepositoryInterface(ctrl *gomock.Controller) *MockAssetRepositoryInterface {
	mock := &MockAssetRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAssetRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetRepositoryInterface) EXPECT() *MockAssetRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAssetRepositoryInterface) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAssetRepositoryInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).Delete), id)
}

// Insert mocks base method.
func (m *MockAssetRepositoryInterface) Insert(asset *model.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockAssetRepositoryInterfaceMockRecorder) Insert(asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).Insert), asset)
}

// Read mocks base method.
func (m *MockAssetRepositoryInterface) Read(id string) (*model.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(*model.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockAssetRepositoryInterfaceMockRecorder) Read(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).Read), id)
}

// Update mocks base method.
func (m *MockAssetRepositoryInterface) Update(asset *model.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAssetRepositoryInterfaceMockRecorder) Update(asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAssetRepositoryInterface)(nil).Update), asset)
}
